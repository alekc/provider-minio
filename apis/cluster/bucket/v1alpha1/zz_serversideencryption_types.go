// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
)

type ServerSideEncryptionInitParameters struct {

	// Name of the bucket on which to setup server side encryption
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/cluster/bucket/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Server side encryption type
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// KMS key id to use for server side encryption
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

type ServerSideEncryptionObservation struct {

	// Name of the bucket on which to setup server side encryption
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Server side encryption type
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// KMS key id to use for server side encryption
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

type ServerSideEncryptionParameters struct {

	// Name of the bucket on which to setup server side encryption
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/cluster/bucket/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.Reference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.Selector `json:"bucketSelector,omitempty" tf:"-"`

	// Server side encryption type
	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// KMS key id to use for server side encryption
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

// ServerSideEncryptionSpec defines the desired state of ServerSideEncryption
type ServerSideEncryptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerSideEncryptionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerSideEncryptionInitParameters `json:"initProvider,omitempty"`
}

// ServerSideEncryptionStatus defines the observed state of ServerSideEncryption.
type ServerSideEncryptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerSideEncryptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServerSideEncryption is the Schema for the ServerSideEncryptions API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type ServerSideEncryption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.encryptionType) || (has(self.initProvider) && has(self.initProvider.encryptionType))",message="spec.forProvider.encryptionType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.kmsKeyId) || (has(self.initProvider) && has(self.initProvider.kmsKeyId))",message="spec.forProvider.kmsKeyId is a required parameter"
	Spec   ServerSideEncryptionSpec   `json:"spec"`
	Status ServerSideEncryptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerSideEncryptionList contains a list of ServerSideEncryptions
type ServerSideEncryptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerSideEncryption `json:"items"`
}

// Repository type metadata.
var (
	ServerSideEncryption_Kind             = "ServerSideEncryption"
	ServerSideEncryption_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerSideEncryption_Kind}.String()
	ServerSideEncryption_KindAPIVersion   = ServerSideEncryption_Kind + "." + CRDGroupVersion.String()
	ServerSideEncryption_GroupVersionKind = CRDGroupVersion.WithKind(ServerSideEncryption_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerSideEncryption{}, &ServerSideEncryptionList{})
}

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccesskeyInitParameters struct {

	// The access key. If provided, must be between 8 and 20 characters.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// Policy to attach to the access key (policy name or JSON document).
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The secret key. If provided, must be at least 8 characters.
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// The status of the access key (enabled/disabled).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The user for whom the access key is managed.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/iam/v1alpha1.User
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type AccesskeyObservation struct {

	// The access key. If provided, must be between 8 and 20 characters.
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Policy to attach to the access key (policy name or JSON document).
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The status of the access key (enabled/disabled).
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The user for whom the access key is managed.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type AccesskeyParameters struct {

	// The access key. If provided, must be between 8 and 20 characters.
	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// Policy to attach to the access key (policy name or JSON document).
	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// The secret key. If provided, must be at least 8 characters.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// The status of the access key (enabled/disabled).
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The user for whom the access key is managed.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/iam/v1alpha1.User
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in iam to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

// AccesskeySpec defines the desired state of Accesskey
type AccesskeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccesskeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccesskeyInitParameters `json:"initProvider,omitempty"`
}

// AccesskeyStatus defines the observed state of Accesskey.
type AccesskeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccesskeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Accesskey is the Schema for the Accesskeys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type Accesskey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccesskeySpec   `json:"spec"`
	Status            AccesskeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccesskeyList contains a list of Accesskeys
type AccesskeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Accesskey `json:"items"`
}

// Repository type metadata.
var (
	Accesskey_Kind             = "Accesskey"
	Accesskey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Accesskey_Kind}.String()
	Accesskey_KindAPIVersion   = Accesskey_Kind + "." + CRDGroupVersion.String()
	Accesskey_GroupVersionKind = CRDGroupVersion.WithKind(Accesskey_Kind)
)

func init() {
	SchemeBuilder.Register(&Accesskey{}, &AccesskeyList{})
}

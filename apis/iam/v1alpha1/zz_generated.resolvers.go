// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/alekc/provider-minio/apis/policy/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Accesskey.
func (mg *Accesskey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.User),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserRef,
		Selector:     mg.Spec.ForProvider.UserSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.User")
	}
	mg.Spec.ForProvider.User = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.User),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserRef,
		Selector:     mg.Spec.InitProvider.UserSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.User")
	}
	mg.Spec.InitProvider.User = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GroupMembership.
func (mg *GroupMembership) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Group),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GroupRef,
		Selector:     mg.Spec.ForProvider.GroupSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Group")
	}
	mg.Spec.ForProvider.Group = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.UsersRefs,
		Selector:      mg.Spec.ForProvider.UsersSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Users")
	}
	mg.Spec.ForProvider.Users = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.UsersRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Group),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.GroupRef,
		Selector:     mg.Spec.InitProvider.GroupSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Group")
	}
	mg.Spec.InitProvider.Group = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Users),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.UsersRefs,
		Selector:      mg.Spec.InitProvider.UsersSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Users")
	}
	mg.Spec.InitProvider.Users = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.UsersRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this GroupPolicy.
func (mg *GroupPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Group),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GroupRef,
		Selector:     mg.Spec.ForProvider.GroupSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Group")
	}
	mg.Spec.ForProvider.Group = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Group),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.GroupRef,
		Selector:     mg.Spec.InitProvider.GroupSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Group")
	}
	mg.Spec.InitProvider.Group = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GroupPolicyAttachment.
func (mg *GroupPolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.GroupNameRef,
		Selector:     mg.Spec.ForProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PolicyNameRef,
		Selector:     mg.Spec.ForProvider.PolicyNameSelector,
		To: reference.To{
			List:    &v1alpha1.PolicyList{},
			Managed: &v1alpha1.Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyName")
	}
	mg.Spec.ForProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.GroupNameRef,
		Selector:     mg.Spec.InitProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PolicyNameRef,
		Selector:     mg.Spec.InitProvider.PolicyNameSelector,
		To: reference.To{
			List:    &v1alpha1.PolicyList{},
			Managed: &v1alpha1.Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyName")
	}
	mg.Spec.InitProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PolicyAttachment.
func (mg *PolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PolicyNameRef,
		Selector:     mg.Spec.ForProvider.PolicyNameSelector,
		To: reference.To{
			List:    &v1alpha1.PolicyList{},
			Managed: &v1alpha1.Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyName")
	}
	mg.Spec.ForProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.UserNameRef,
		Selector:     mg.Spec.ForProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserName")
	}
	mg.Spec.ForProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.PolicyNameRef,
		Selector:     mg.Spec.InitProvider.PolicyNameSelector,
		To: reference.To{
			List:    &v1alpha1.PolicyList{},
			Managed: &v1alpha1.Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyName")
	}
	mg.Spec.InitProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.UserNameRef,
		Selector:     mg.Spec.InitProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserName")
	}
	mg.Spec.InitProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserNameRef = rsp.ResolvedReference

	return nil
}

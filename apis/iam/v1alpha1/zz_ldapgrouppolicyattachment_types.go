// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LdapGroupPolicyAttachmentInitParameters struct {

	// (String) The distinguished name (dn) of group to attach policy to
	// The distinguished name (dn) of group to attach policy to
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) Name of policy to attach to group
	// Name of policy to attach to group
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/policy/v1alpha1.Policy
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// Reference to a Policy in policy to populate policyName.
	// +kubebuilder:validation:Optional
	PolicyNameRef *v1.Reference `json:"policyNameRef,omitempty" tf:"-"`

	// Selector for a Policy in policy to populate policyName.
	// +kubebuilder:validation:Optional
	PolicyNameSelector *v1.Selector `json:"policyNameSelector,omitempty" tf:"-"`
}

type LdapGroupPolicyAttachmentObservation struct {

	// (String) The distinguished name (dn) of group to attach policy to
	// The distinguished name (dn) of group to attach policy to
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Name of policy to attach to group
	// Name of policy to attach to group
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type LdapGroupPolicyAttachmentParameters struct {

	// (String) The distinguished name (dn) of group to attach policy to
	// The distinguished name (dn) of group to attach policy to
	// +kubebuilder:validation:Optional
	GroupDn *string `json:"groupDn,omitempty" tf:"group_dn,omitempty"`

	// (String) Name of policy to attach to group
	// Name of policy to attach to group
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/policy/v1alpha1.Policy
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// Reference to a Policy in policy to populate policyName.
	// +kubebuilder:validation:Optional
	PolicyNameRef *v1.Reference `json:"policyNameRef,omitempty" tf:"-"`

	// Selector for a Policy in policy to populate policyName.
	// +kubebuilder:validation:Optional
	PolicyNameSelector *v1.Selector `json:"policyNameSelector,omitempty" tf:"-"`
}

// LdapGroupPolicyAttachmentSpec defines the desired state of LdapGroupPolicyAttachment
type LdapGroupPolicyAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LdapGroupPolicyAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LdapGroupPolicyAttachmentInitParameters `json:"initProvider,omitempty"`
}

// LdapGroupPolicyAttachmentStatus defines the observed state of LdapGroupPolicyAttachment.
type LdapGroupPolicyAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LdapGroupPolicyAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LdapGroupPolicyAttachment is the Schema for the LdapGroupPolicyAttachments API. Attaches LDAP group to a policy. Can be used against both built-in and user-defined policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,minio}
type LdapGroupPolicyAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupDn) || (has(self.initProvider) && has(self.initProvider.groupDn))",message="spec.forProvider.groupDn is a required parameter"
	Spec   LdapGroupPolicyAttachmentSpec   `json:"spec"`
	Status LdapGroupPolicyAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LdapGroupPolicyAttachmentList contains a list of LdapGroupPolicyAttachments
type LdapGroupPolicyAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LdapGroupPolicyAttachment `json:"items"`
}

// Repository type metadata.
var (
	LdapGroupPolicyAttachment_Kind             = "LdapGroupPolicyAttachment"
	LdapGroupPolicyAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LdapGroupPolicyAttachment_Kind}.String()
	LdapGroupPolicyAttachment_KindAPIVersion   = LdapGroupPolicyAttachment_Kind + "." + CRDGroupVersion.String()
	LdapGroupPolicyAttachment_GroupVersionKind = CRDGroupVersion.WithKind(LdapGroupPolicyAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&LdapGroupPolicyAttachment{}, &LdapGroupPolicyAttachmentList{})
}

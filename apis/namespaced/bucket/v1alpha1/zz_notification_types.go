// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type NotificationInitParameters struct {

	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	Queue []QueueInitParameters `json:"queue,omitempty" tf:"queue,omitempty"`
}

type NotificationObservation struct {
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Queue []QueueObservation `json:"queue,omitempty" tf:"queue,omitempty"`
}

type NotificationParameters struct {

	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Queue []QueueParameters `json:"queue,omitempty" tf:"queue,omitempty"`
}

type QueueInitParameters struct {

	// +listType=set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn,omitempty"`
}

type QueueObservation struct {

	// +listType=set
	Events []*string `json:"events,omitempty" tf:"events,omitempty"`

	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	QueueArn *string `json:"queueArn,omitempty" tf:"queue_arn,omitempty"`
}

type QueueParameters struct {

	// +kubebuilder:validation:Optional
	// +listType=set
	Events []*string `json:"events" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	FilterPrefix *string `json:"filterPrefix,omitempty" tf:"filter_prefix,omitempty"`

	// +kubebuilder:validation:Optional
	FilterSuffix *string `json:"filterSuffix,omitempty" tf:"filter_suffix,omitempty"`

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	QueueArn *string `json:"queueArn" tf:"queue_arn,omitempty"`
}

// NotificationSpec defines the desired state of Notification
type NotificationSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            NotificationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NotificationInitParameters `json:"initProvider,omitempty"`
}

// NotificationStatus defines the observed state of Notification.
type NotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Notification is the Schema for the Notifications API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,minio}
type Notification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationSpec   `json:"spec"`
	Status            NotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationList contains a list of Notifications
type NotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Notification `json:"items"`
}

// Repository type metadata.
var (
	Notification_Kind             = "Notification"
	Notification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Notification_Kind}.String()
	Notification_KindAPIVersion   = Notification_Kind + "." + CRDGroupVersion.String()
	Notification_GroupVersionKind = CRDGroupVersion.WithKind(Notification_Kind)
)

func init() {
	SchemeBuilder.Register(&Notification{}, &NotificationList{})
}

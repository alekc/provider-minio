// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type RetentionInitParameters struct {

	// (String) Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	// Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// (String) Retention mode for the bucket. Valid values are:
	// Retention mode for the bucket. Valid values are:
	// - GOVERNANCE: Prevents object modification by non-privileged users. Users with s3:BypassGovernanceRetention permission can modify objects.
	// - COMPLIANCE: Prevents any object modification by all users, including the root user, until retention period expires.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Time unit for the validity period. Valid values are DAYS or YEARS.
	// Time unit for the validity period. Valid values are DAYS or YEARS.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// (Number) Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	// Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	ValidityPeriod *float64 `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

type RetentionObservation struct {

	// (String) Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	// Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Retention mode for the bucket. Valid values are:
	// Retention mode for the bucket. Valid values are:
	// - GOVERNANCE: Prevents object modification by non-privileged users. Users with s3:BypassGovernanceRetention permission can modify objects.
	// - COMPLIANCE: Prevents any object modification by all users, including the root user, until retention period expires.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Time unit for the validity period. Valid values are DAYS or YEARS.
	// Time unit for the validity period. Valid values are DAYS or YEARS.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// (Number) Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	// Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	ValidityPeriod *float64 `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

type RetentionParameters struct {

	// (String) Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	// Name of the bucket to configure object locking. The bucket must be created with object locking enabled.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// (String) Retention mode for the bucket. Valid values are:
	// Retention mode for the bucket. Valid values are:
	// - GOVERNANCE: Prevents object modification by non-privileged users. Users with s3:BypassGovernanceRetention permission can modify objects.
	// - COMPLIANCE: Prevents any object modification by all users, including the root user, until retention period expires.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (String) Time unit for the validity period. Valid values are DAYS or YEARS.
	// Time unit for the validity period. Valid values are DAYS or YEARS.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// (Number) Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	// Duration for which objects should be retained under WORM lock, in the specified unit. Must be a positive integer.
	// +kubebuilder:validation:Optional
	ValidityPeriod *float64 `json:"validityPeriod,omitempty" tf:"validity_period,omitempty"`
}

// RetentionSpec defines the desired state of Retention
type RetentionSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            RetentionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RetentionInitParameters `json:"initProvider,omitempty"`
}

// RetentionStatus defines the observed state of Retention.
type RetentionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RetentionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Retention is the Schema for the Retentions API. Manages object lock retention settings for a MinIO bucket. Object locking enforces Write-Once Read-Many (WORM) immutability to protect versioned objects from deletion.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,minio}
type Retention struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.unit) || (has(self.initProvider) && has(self.initProvider.unit))",message="spec.forProvider.unit is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.validityPeriod) || (has(self.initProvider) && has(self.initProvider.validityPeriod))",message="spec.forProvider.validityPeriod is a required parameter"
	Spec   RetentionSpec   `json:"spec"`
	Status RetentionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RetentionList contains a list of Retentions
type RetentionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Retention `json:"items"`
}

// Repository type metadata.
var (
	Retention_Kind             = "Retention"
	Retention_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Retention_Kind}.String()
	Retention_KindAPIVersion   = Retention_Kind + "." + CRDGroupVersion.String()
	Retention_GroupVersionKind = CRDGroupVersion.WithKind(Retention_Kind)
)

func init() {
	SchemeBuilder.Register(&Retention{}, &RetentionList{})
}

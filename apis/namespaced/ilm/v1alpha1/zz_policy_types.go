// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type NoncurrentExpirationInitParameters struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// negative.
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`
}

type NoncurrentExpirationObservation struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// negative.
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`
}

type NoncurrentExpirationParameters struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	// +kubebuilder:validation:Optional
	Days *string `json:"days" tf:"days,omitempty"`

	// negative.
	// +kubebuilder:validation:Optional
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`
}

type NoncurrentTransitionInitParameters struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// negative.
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`

	// (String) The storage class to transition objects to.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentTransitionObservation struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// negative.
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`

	// (String) The storage class to transition objects to.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentTransitionParameters struct {

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	// +kubebuilder:validation:Optional
	Days *string `json:"days" tf:"days,omitempty"`

	// negative.
	// +kubebuilder:validation:Optional
	NewerVersions *float64 `json:"newerVersions,omitempty" tf:"newer_versions,omitempty"`

	// (String) The storage class to transition objects to.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

type PolicyInitParameters struct {

	// (String) The name of the bucket to which this lifecycle policy applies. Must be between 0 and 63 characters.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// (Block List, Min: 1) A list of lifecycle rules (see below for nested schema).
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type PolicyObservation struct {

	// (String) The name of the bucket to which this lifecycle policy applies. Must be between 0 and 63 characters.
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Min: 1) A list of lifecycle rules (see below for nested schema).
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type PolicyParameters struct {

	// (String) The name of the bucket to which this lifecycle policy applies. Must be between 0 and 63 characters.
	// +crossplane:generate:reference:type=github.com/alekc/provider-minio/apis/namespaced/bucket/v1alpha1.Bucket
	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// Reference to a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketRef *v1.NamespacedReference `json:"bucketRef,omitempty" tf:"-"`

	// Selector for a Bucket in bucket to populate bucket.
	// +kubebuilder:validation:Optional
	BucketSelector *v1.NamespacedSelector `json:"bucketSelector,omitempty" tf:"-"`

	// (Block List, Min: 1) A list of lifecycle rules (see below for nested schema).
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`
}

type RuleInitParameters struct {

	// 12-31"), or "DeleteMarker".
	// Value may be duration (5d), date (1970-01-01), or "DeleteMarker" to expire delete markers if `noncurrent_version_expiration_days` is used
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (String) Prefix path filter for the rule.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Configuration for expiring noncurrent object versions (see below).
	NoncurrentExpiration []NoncurrentExpirationInitParameters `json:"noncurrentExpiration,omitempty" tf:"noncurrent_expiration,omitempty"`

	// (Block List, Max: 1) Configuration for transitioning noncurrent object versions (see below).
	NoncurrentTransition []NoncurrentTransitionInitParameters `json:"noncurrentTransition,omitempty" tf:"noncurrent_transition,omitempty"`

	// (String) Status of the rule. Can be either "Enabled" or "Disabled". Defaults to "Enabled".
	// Status of the rule. Can be either 'Enabled' or 'Disabled'. Defaults to 'Enabled'.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// value pairs of tags to filter objects.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Configuration block for transitioning objects to a different storage class (see below).
	Transition []TransitionInitParameters `json:"transition,omitempty" tf:"transition,omitempty"`
}

type RuleObservation struct {

	// 12-31"), or "DeleteMarker".
	// Value may be duration (5d), date (1970-01-01), or "DeleteMarker" to expire delete markers if `noncurrent_version_expiration_days` is used
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (String) Prefix path filter for the rule.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Block List, Max: 1) Configuration for expiring noncurrent object versions (see below).
	NoncurrentExpiration []NoncurrentExpirationObservation `json:"noncurrentExpiration,omitempty" tf:"noncurrent_expiration,omitempty"`

	// (Block List, Max: 1) Configuration for transitioning noncurrent object versions (see below).
	NoncurrentTransition []NoncurrentTransitionObservation `json:"noncurrentTransition,omitempty" tf:"noncurrent_transition,omitempty"`

	// (String) Status of the rule. Can be either "Enabled" or "Disabled". Defaults to "Enabled".
	// Status of the rule. Can be either 'Enabled' or 'Disabled'. Defaults to 'Enabled'.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// value pairs of tags to filter objects.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Configuration block for transitioning objects to a different storage class (see below).
	Transition []TransitionObservation `json:"transition,omitempty" tf:"transition,omitempty"`
}

type RuleParameters struct {

	// 12-31"), or "DeleteMarker".
	// Value may be duration (5d), date (1970-01-01), or "DeleteMarker" to expire delete markers if `noncurrent_version_expiration_days` is used
	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// (String) Prefix path filter for the rule.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (String) The ID of this resource.
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// (Block List, Max: 1) Configuration for expiring noncurrent object versions (see below).
	// +kubebuilder:validation:Optional
	NoncurrentExpiration []NoncurrentExpirationParameters `json:"noncurrentExpiration,omitempty" tf:"noncurrent_expiration,omitempty"`

	// (Block List, Max: 1) Configuration for transitioning noncurrent object versions (see below).
	// +kubebuilder:validation:Optional
	NoncurrentTransition []NoncurrentTransitionParameters `json:"noncurrentTransition,omitempty" tf:"noncurrent_transition,omitempty"`

	// (String) Status of the rule. Can be either "Enabled" or "Disabled". Defaults to "Enabled".
	// Status of the rule. Can be either 'Enabled' or 'Disabled'. Defaults to 'Enabled'.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// value pairs of tags to filter objects.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Block List, Max: 1) Configuration block for transitioning objects to a different storage class (see below).
	// +kubebuilder:validation:Optional
	Transition []TransitionParameters `json:"transition,omitempty" tf:"transition,omitempty"`
}

type TransitionInitParameters struct {

	// MM-DD" format.
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// (String) The storage class to transition objects to.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionObservation struct {

	// MM-DD" format.
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// (String) The storage class to transition objects to.
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionParameters struct {

	// MM-DD" format.
	// +kubebuilder:validation:Optional
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// (String) Number of days after which objects should transition, in format "Nd" (e.g., "30d").
	// +kubebuilder:validation:Optional
	Days *string `json:"days,omitempty" tf:"days,omitempty"`

	// (String) The storage class to transition objects to.
	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass" tf:"storage_class,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. minio_ilm_policy handles lifecycle settings for a given minio_s3_bucket.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,minio}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type AzureConfigInitParameters struct {
	AccountKeySecretRef *v1.LocalSecretKeySelector `json:"accountKeySecretRef,omitempty" tf:"-"`

	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type AzureConfigObservation struct {
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type AzureConfigParameters struct {

	// +kubebuilder:validation:Optional
	AccountKeySecretRef *v1.LocalSecretKeySelector `json:"accountKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type GcsConfigInitParameters struct {
	CredentialsSecretRef *v1.LocalSecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type GcsConfigObservation struct {
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type GcsConfigParameters struct {

	// +kubebuilder:validation:Optional
	CredentialsSecretRef *v1.LocalSecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type MinioConfigInitParameters struct {
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`
}

type MinioConfigObservation struct {
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`
}

type MinioConfigParameters struct {

	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`
}

type S3ConfigInitParameters struct {
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type S3ConfigObservation struct {
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type S3ConfigParameters struct {

	// +kubebuilder:validation:Optional
	AccessKey *string `json:"accessKey,omitempty" tf:"access_key,omitempty"`

	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.LocalSecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TierInitParameters struct {
	AzureConfig []AzureConfigInitParameters `json:"azureConfig,omitempty" tf:"azure_config,omitempty"`

	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	ForceNewCredentials *bool `json:"forceNewCredentials,omitempty" tf:"force_new_credentials,omitempty"`

	GcsConfig []GcsConfigInitParameters `json:"gcsConfig,omitempty" tf:"gcs_config,omitempty"`

	MinioConfig []MinioConfigInitParameters `json:"minioConfig,omitempty" tf:"minio_config,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	S3Config []S3ConfigInitParameters `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TierObservation struct {
	AzureConfig []AzureConfigObservation `json:"azureConfig,omitempty" tf:"azure_config,omitempty"`

	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	ForceNewCredentials *bool `json:"forceNewCredentials,omitempty" tf:"force_new_credentials,omitempty"`

	GcsConfig []GcsConfigObservation `json:"gcsConfig,omitempty" tf:"gcs_config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MinioConfig []MinioConfigObservation `json:"minioConfig,omitempty" tf:"minio_config,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	S3Config []S3ConfigObservation `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TierParameters struct {

	// +kubebuilder:validation:Optional
	AzureConfig []AzureConfigParameters `json:"azureConfig,omitempty" tf:"azure_config,omitempty"`

	// +kubebuilder:validation:Optional
	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	ForceNewCredentials *bool `json:"forceNewCredentials,omitempty" tf:"force_new_credentials,omitempty"`

	// +kubebuilder:validation:Optional
	GcsConfig []GcsConfigParameters `json:"gcsConfig,omitempty" tf:"gcs_config,omitempty"`

	// +kubebuilder:validation:Optional
	MinioConfig []MinioConfigParameters `json:"minioConfig,omitempty" tf:"minio_config,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	S3Config []S3ConfigParameters `json:"s3Config,omitempty" tf:"s3_config,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TierSpec defines the desired state of Tier
type TierSpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            TierParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TierInitParameters `json:"initProvider,omitempty"`
}

// TierStatus defines the observed state of Tier.
type TierStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TierObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Tier is the Schema for the Tiers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,minio}
type Tier struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucket) || (has(self.initProvider) && has(self.initProvider.bucket))",message="spec.forProvider.bucket is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TierSpec   `json:"spec"`
	Status TierStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TierList contains a list of Tiers
type TierList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tier `json:"items"`
}

// Repository type metadata.
var (
	Tier_Kind             = "Tier"
	Tier_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tier_Kind}.String()
	Tier_KindAPIVersion   = Tier_Kind + "." + CRDGroupVersion.String()
	Tier_GroupVersionKind = CRDGroupVersion.WithKind(Tier_Kind)
)

func init() {
	SchemeBuilder.Register(&Tier{}, &TierList{})
}
